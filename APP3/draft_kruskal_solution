visited = create_array()
solution = create_array()

// As output, Kruskal implementation is returning a Node containing all the neighbors sorted using the distance to itself
// Let n denote the number of nodes. For a complete graph, $|E| = O(n^2)$, SO kruskal has the complexity of $O(n^2log(n))$. On the other hand, during the exploration, we check every node exactly once, so the complexity of this procedure is linear. Overall the algorithm is dominated by the kruskal's cost. $
// Data structure
struct Node {
	int i;
	list<Node> neighbors
};

procedure drill_holes(holes)

	root_mst = internal_safe_and_clean_kruskal(holes)
	
	for k from 0 to len(holes) - 1 do
		visited[k] = 0

	walkthrough_node(GetFirstNode(mst))

procedure walkthrough_node(node)
	index = node.i
	visited[index] = true
	
	solution += node
	
	n = len(node.neighbors)
	for i from 0 to n - 1 do
		if not visited[node.neighbors[i]]
			walkthrough_node(node.neighbors[i])
